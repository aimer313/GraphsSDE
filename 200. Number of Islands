class Solution {
public:
    //  directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]
    vector<vector<int>> direction = {{1,0} , {-1,0} , {0,1} , {0,-1}};
    void bfs(int row , int col ,vector<vector<char>> grid,vector<vector<int>>& vis) {
        vis[row][col] = 1;
        queue<pair<int,int>> q;
        q.push({row , col});
        int n = grid.size();
        int m = grid[0].size();
         
        while(!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            // 4 direction neighbour
            for(auto &dr : direction){
                int nrow = row + dr[0];
                int ncol = col + dr[1];
                  if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == '1' && !vis[nrow][ncol]) {
                        vis[nrow][ncol] = 1;
                        q.push({nrow , ncol});
                    }
                
            }
    }
    }
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n , vector<int>(m,0));
        int cnt = 0;
        for(int row = 0 ; row < n ; row++) {
            for(int col = 0 ; col < m ; col++) {
                if(!vis[row][col] && grid[row][col] == '1') {
                    cnt++;
                    bfs(row , col , grid , vis);
                }
            }
        }
        return cnt;
    }
};


// 8 direction 

void bfs(int row , int col ,vector<vector<char>> grid,vector<vector<int>>& vis) {
        vis[row][col] = 1;
        queue<pair<int,int>> q;
        q.push({row , col});
        int n = grid.size();
        int m = grid[0].size();
         
        while(!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            // 8 direction neighbour
            for(int delrow = -1 ; delrow <= 1 ; delrow++) {
                for(int delcol = -1 ; delcol <= 1 ; delcol++) {
                    int nrow = row + delrow;
                    int ncol = col + delcol;
                    if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && grid[nrow][ncol] == '1' && !vis[nrow][ncol]) {
                        vis[nrow][ncol] = 1;
                        q.push({nrow , ncol});
                    }
                }
            }
        }
    }
