class Solution {
    public:
        void dfs(int node , unordered_map<int , vector<int>>& adjLs, vector<int>& vis) {
            vis[node] = 1;
            for(auto i : adjLs[node]) {
                if(!vis[i]) {
                    dfs(i , adjLs , vis);
                }
            }
        }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        // vector<int> adjLs[n];
        unordered_map<int , vector<int>> adjLs;
        for(int i = 0 ; i<n ; i++) {
            for(int j = 0 ; j<n ; j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adjLs[i].push_back(j);
                    adjLs[j].push_back(i);
                }
            }
        }
        vector<int> vis(n,0);
        int cnt = 0;
        for(int i = 0 ; i<n ; i++) {
            if(!vis[i]) {
                cnt++;
                dfs(i , adjLs , vis);
            }
        }
        return cnt; 
    }
};
